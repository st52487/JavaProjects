package gui;

import automobily.Adapter;
import automobily.Automobily;
import automobily.BarvaAuta;
import automobily.Dodavka;
import automobily.NakladniAutomobil;
import automobily.OsobniAutomobil;
import automobily.TypAutomobilu;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.RowConstraints;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import kolekce.KolekceException;

public class DialogNovy {

    private ComboBox<String> comboBox;
    private ComboBox<BarvaAuta> barva;
    private GridPane grid;
    private Label a, b, c, d;
    private TextField txtA, txtC, txtD;
    private Button btnOk;
    private Stage stage;
    private Pane pane;
    private Label vyber;
    private Scene scena;
    private Adapter adapter;
    private Automobily automobily;
    private CheckBox checkBox;

    private ObservableList<String> list1
            = FXCollections.observableArrayList("Osobní auto",
                    "Dodávka", "Nákladní auto");
    private ObservableList<String> list2
            = FXCollections.observableArrayList("BÍLA", "ČERVENÁ", "ČERNÁ", "MODRÁ",
                    "ZELENÁ", "RŮŽOVÁ", "FIALOVÁ", "ŽLUTÁ", "ORANŽOVÁ");

    public DialogNovy(Adapter adapter, Automobily automobily) {
        this.adapter = adapter;
        this.automobily = automobily;
        vytvorDialog();

    }

    private void vytvorDialog() {

        stage = new Stage();

        pane = new Pane();

        a = new Label("Počet kol: ");
        b = new Label("Barva: ");
        c = new Label();
        d = new Label();

        txtA = new TextField();
        txtC = new TextField();
        txtD = new TextField();

        grid = new GridPane();

        btnOk = new Button();

        barva = new ComboBox();
        comboBox = new ComboBox();

        checkBox = new CheckBox();

        vyber = new Label("Vyber typ: ");
        vyber.setFont(new Font("Arial", 16));

        comboBox.setItems(list1);
        comboBox.getSelectionModel().selectFirst();

        barva.setItems(FXCollections.observableArrayList(BarvaAuta.values()));
        barva.getSelectionModel().selectFirst();

        grid.setPadding(new javafx.geometry.Insets(20, 10, 10, 20));

        txtA.setText("4");

        grid.setConstraints(a, 1, 1);
        grid.getChildren().add(a);

        grid.setConstraints(b, 1, 2);
        grid.getChildren().add(b);

        grid.setConstraints(txtA, 2, 1);
        grid.getChildren().add(txtA);
        grid.setConstraints(barva, 2, 2);
        grid.getChildren().add(barva);

        grid.setConstraints(c, 1, 3);
        grid.getChildren().add(c);
        grid.setConstraints(d, 1, 4);
        grid.getChildren().add(d);

        grid.setConstraints(txtC, 2, 3);
        grid.getChildren().add(txtC);
        grid.setConstraints(txtD, 2, 4);
        grid.getChildren().add(txtD);

        btnOk.setText("OK");
        grid.setConstraints(btnOk, 2, 5);
        grid.getChildren().add(btnOk);

        grid.getColumnConstraints().add(new ColumnConstraints(100));
        grid.getColumnConstraints().add(new ColumnConstraints(140));
        grid.getColumnConstraints().add(new ColumnConstraints(140));
        grid.getRowConstraints().add(new RowConstraints(40));
        grid.getRowConstraints().add(new RowConstraints(40));
        grid.getRowConstraints().add(new RowConstraints(40));
        grid.getRowConstraints().add(new RowConstraints(40));
        grid.getRowConstraints().add(new RowConstraints(40));
        grid.getRowConstraints().add(new RowConstraints(40));

        comboBox.setOnAction((ActionEvent event) -> {
            vytvor();
        });

        grid.setConstraints(vyber, 0, 0);
        grid.setConstraints(comboBox, 1, 0);

        grid.getChildren().add(vyber);
        grid.getChildren().add(comboBox);

        vytvor();

        btnOk.setDisable(false);

        btnOk.setOnAction((event) -> {
            if (automobily != null) {
                switch (automobily.getTyp()) {
                    case DODAVKA:
                        ((Dodavka) automobily).setPocetKol(Integer.parseInt(txtA.getText()));
                        ((Dodavka) automobily).setHmotnost(Integer.parseInt(txtC.getText()));
                        ((Dodavka) automobily).setBarva(barva.getSelectionModel().getSelectedItem());
                        ((Dodavka) automobily).setTypMotoru(txtD.getText());
                        break;

                    case NAKLADNI:
                        ((NakladniAutomobil) automobily).setPocetKol(Integer.parseInt(txtA.getText()));
                        ((NakladniAutomobil) automobily).setPocetKoni(Integer.parseInt(txtC.getText()));
                        ((NakladniAutomobil) automobily).setBarva(barva.getSelectionModel().getSelectedItem());
                        ((NakladniAutomobil) automobily).setNahonNaVsechny(checkBox.isSelected());
                        break;

                    case OSOBNI:
                        ((OsobniAutomobil) automobily).setPocetKol(Integer.parseInt(txtA.getText()));
                        ((OsobniAutomobil) automobily).setZnackaAuta(txtC.getText());
                        ((OsobniAutomobil) automobily).setBarva(barva.getSelectionModel().getSelectedItem());
                        ((OsobniAutomobil) automobily).setFunkcni(checkBox.isSelected());
                        break;
                }

            } else {
                if (comboBox.getSelectionModel().getSelectedItem().equals(list1.get(0))) {
                    try {
                        adapter.clickPridejOsobni(TypAutomobilu.OSOBNI, Integer.parseInt(txtA.getText()), barva.getSelectionModel().getSelectedItem(), txtC.getText(), Boolean.parseBoolean(txtD.getText()));
                    } catch (KolekceException ex) {
                    }
                } else if (comboBox.getSelectionModel().getSelectedItem().equals(list1.get(1))) {
                    try {
                        adapter.clickPridejDodavka(TypAutomobilu.DODAVKA, Integer.parseInt(txtA.getText()), barva.getSelectionModel().getSelectedItem(), Integer.parseInt(txtC.getText()), txtD.getText());
                    } catch (KolekceException ex) {
                        alert().showAndWait();
                    }
                } else if (comboBox.getSelectionModel().getSelectedItem().equals(list1.get(2))) {
                    try {
                        adapter.clickPridejNakladni(TypAutomobilu.NAKLADNI, Integer.parseInt(txtA.getText()), barva.getSelectionModel().getSelectedItem(), Integer.parseInt(txtC.getText()), Boolean.parseBoolean(txtD.getText()));
                    } catch (KolekceException ex) {
                    }
                }
            }
            stage.close();
        });

        if (automobily != null) {
            set();
        }

        for (int i = 0; i < grid.getChildren().size(); i++) {
            if (grid.getChildren().get(i).equals(txtD)) {
                System.out.println(i);
                break;
            }
        }

        pane.getChildren().add(grid);
        stage.setTitle("Nový automobil");
        scena = new Scene(pane, 420, 255);
        stage.setResizable(false);
        stage.setScene(scena);
        stage.showAndWait();

    }

    private Alert alert() {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Chyba");
        return alert;
    }

    public ComboBox<BarvaAuta> getBarva() {
        return barva;
    }

    public ComboBox<String> getComboBox() throws KolekceException {
        return comboBox;
    }

    public String getTxtA() {
        return txtA.getText();
    }

    public String getTxtC() {
        return txtC.getText();
    }

    public String getTxtD() {
        return txtD.getText();
    }

//
//    private void vseVyplneno(KeyEvent event) {
//        if (txtA.length() != 0 && tfCena.getText().length() != 0) {
//            btPridejKnihu.setDisable(false);
//        } else {
//            btPridejKnihu.setDisable(true);
//        }
//    }
//    private boolean zadaneUdaje() {
//        if (txtA.getText() == null || txtA.getText().length() == 0
//                || txtC.getText() == null || txtC.getText().length() == 00
//                || txtD.getText() == null || txtD.getText().length() == 00) {
//            return false;
//        }
//        return true;
//    }
    private void vytvor() {
        try {
            if (comboBox.getSelectionModel().getSelectedItem().equals("Osobní auto")) {
                c.setText("Značka:");
                d.setText("Funkční: ");
                txtC.setText("6S5 487");

                grid.getChildren().set(7, checkBox);
                grid.setConstraints(checkBox, 2, 4);
            } else if (comboBox.getSelectionModel().getSelectedItem().equals("Dodávka")) {
                c.setText("Hmotnost:");
                d.setText("Typ motoru:");
                txtC.setText("450");
                grid.getChildren().set(7, txtD);
                grid.setConstraints(txtD, 2, 4);
                txtD.setText("turbo");
            } else if (comboBox.getSelectionModel().getSelectedItem().equals("Nákladní auto")) {
                c.setText("Počet koní:");
                d.setText("Náhon na všechny:");
                txtC.setText("100");

                grid.getChildren().set(7, checkBox);
                grid.setConstraints(checkBox, 2, 4);
            }
        } catch (Exception e) {
            alert().showAndWait();
        }

    }

    private void set() {
        comboBox.setDisable(true);
        switch (automobily.getTyp()) {
            case DODAVKA:
                c.setText("Hmotnost: ");
                d.setText("Typ motoru: ");
                barva.setValue(((Dodavka) automobily).getBarva());
                txtA.setText(Integer.toString(((Dodavka) automobily).getPocetKol()));
                txtC.setText(Integer.toString(((Dodavka) automobily).getVelikost()));
                txtD.setText(((Dodavka) automobily).getTypMotoru());
                break;

            case NAKLADNI:
                c.setText("Počet koni: ");
                d.setText("Náhon na všechny: ");
                barva.setValue(((NakladniAutomobil) automobily).getBarva());
                txtA.setText(Integer.toString(((NakladniAutomobil) automobily).getPocetKol()));
                txtC.setText(Integer.toString(((NakladniAutomobil) automobily).getPocetKoni()));
                txtD.setText(Boolean.toString(((NakladniAutomobil) automobily).isNahonNaVsechny()));
                break;

            case OSOBNI:
                c.setText("Značka: ");
                d.setText("Funkční: ");
                barva.setValue(((OsobniAutomobil) automobily).getBarva());
                txtA.setText(Integer.toString(((OsobniAutomobil) automobily).getPocetKol()));
                txtC.setText(((OsobniAutomobil) automobily).getZnackaAuta());
                txtD.setText(Boolean.toString(((OsobniAutomobil) automobily).getFunkcni()));
                break;
        }

    }

}
